{"version":3,"file":"static/js/458.5777f722.chunk.js","mappings":"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","sources":["components/api.js","pages/Movies/MovieDetails.styled.js","pages/Movies/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '4707371d53aa0467b337f4fda109b465';\n\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}&page=${1}`)\n  return response.data\n}\nexport const fetchSearchMovie = async (query) => {\n  const response = await axios.get('search/movie?', {\n    params: {\n      api_key: API_KEY,\n      query: `${query}`,\n    }\n  })\n  return response.data\n}\n\nexport const fetchMovieDetails = async (movie_id) => {\n  const response = await axios.get(`movie/${movie_id}?api_key=${API_KEY}`)\n  return response.data\n}\n\nexport const fetchMovieCast = async (movie_id) => {\n  const response = await axios.get(`movie/${movie_id}/credits?api_key=${API_KEY}`)\n  return response.data\n}\n\nexport async function fetchMovieReviews(movie_id) {\n  try {\n    const response = await axios.get(`movie/${movie_id}/reviews?api_key=${API_KEY}`)\n    return response.data\n  } catch (error) {\n    new Error('Page not found')\n  }\n}","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const InfoSection = styled.section`\nmargin-top: 20px;\nbox-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;\n@media screen and (min-width: 768px){\n  display: flex;\n  gap: 10px;\n  align-items: center;\n\n}\n`\nexport const MovieImg = styled.img`\nmax-width: 500px;\nheight: 550px;\n@media screen and (max-width: 768px){\n  margin: auto;\n}\n`\nexport const MovieInfo = styled.div`\npadding: 20px 10px;\n`\nexport const MovieTitle = styled.h2`\nfont-size: 40px;\nfont-weight: 700;\n`\nexport const MovieDetailsPartTitle = styled.h3`\nfont-size: 32px;\nfont-weight: 600;\nmargin-bottom: 20px;\n`\nexport const MovieText = styled.p`\nfont-size: 24px;\nmargin-bottom: 20px;\n`\nexport const AdditionalInfoTitle = styled.h3`\nfont-size: 26px;\nfont-weight: 500;\nmargin-bottom: 20px;\n`\nexport const AdditionalInfoLinkItem = styled.li`\nwidth: 30px;\nmargin-bottom: 20px;\n`\nexport const AdditionalInfoLink = styled(Link)`\npadding-left: 20px;\nfont-size: 26px;\n\n`\n\n\n","import { useEffect, useState, Suspense } from 'react';\nimport { Outlet, useParams, useLocation} from 'react-router-dom';\nimport { fetchMovieDetails } from 'components/api';\nimport { ToastContainer, toast } from 'react-toastify';\nimport {\n  InfoSection,\n  MovieImg,\n  MovieInfo,\n  MovieTitle,\n  MovieDetailsPartTitle,\n  MovieText,\n  AdditionalInfoTitle,\n  AdditionalInfoLink,\n  AdditionalInfoLinkItem,\n} from './MovieDetails.styled';\nimport { Loading } from 'components/Loading/Loading';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [poster, setPoster] = useState('');\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  \n  useEffect(() => {\n    async function getDetails() {\n      try {\n        await fetchMovieDetails(movieId).then(details => {\n          setMovieDetails(details);\n          setGenres(details.genres);\n          setPoster(details.poster_path);\n        });\n      } catch (error) {\n        toast.error('Something went wrong! Please try again!');\n      }\n    }\n    getDetails();\n  }, [movieId]);\n\n  const genresList = genres && genres.map(genre => genre.name).join(', ');\n\n  const { original_title, overview, vote_average, release_date } = movieDetails;\n  return (\n    <>\n      <AdditionalInfoLink to={backLinkHref}>Go back</AdditionalInfoLink>\n      <InfoSection>\n        <MovieImg\n          src={\n            !poster\n              ? `http://m.mooeraudio.com/public/img/no-img.svg`\n              : `https://image.tmdb.org/t/p/w500/${poster}`\n          }\n          alt={original_title}\n        />\n        <MovieInfo>\n          <MovieTitle>\n            {original_title} ({new Date(release_date).getFullYear()})\n          </MovieTitle>\n          <MovieText>\n            User Score: {Math.ceil(Number(vote_average) * 10)}%\n          </MovieText>\n          <MovieDetailsPartTitle>Overview</MovieDetailsPartTitle>\n          <MovieText>{overview}</MovieText>\n          <MovieDetailsPartTitle>Genres</MovieDetailsPartTitle>\n          <MovieText>{genresList}</MovieText>\n        </MovieInfo>\n      </InfoSection>\n      <div>\n        <AdditionalInfoTitle>Additional information</AdditionalInfoTitle>\n        <ul>\n          <AdditionalInfoLinkItem>\n            <AdditionalInfoLink to=\"cast\" state={location.state}>\n              Cast\n            </AdditionalInfoLink>\n          </AdditionalInfoLinkItem>\n          <AdditionalInfoLinkItem>\n            <AdditionalInfoLink to=\"reviews\" state={location.state}>\n              Reviews\n            </AdditionalInfoLink>\n          </AdditionalInfoLinkItem>\n        </ul>\n        <Suspense fallback={<Loading />}>\n          <Outlet />\n        </Suspense>\n      </div>\n      <ToastContainer />\n    </>\n  );\n};\nexport default MovieDetails;"],"names":["axios","API_KEY","fetchTrending","response","data","fetchSearchMovie","query","params","api_key","fetchMovieDetails","movie_id","fetchMovieCast","fetchMovieReviews","Error","InfoSection","styled","MovieImg","MovieInfo","MovieTitle","MovieDetailsPartTitle","MovieText","AdditionalInfoTitle","AdditionalInfoLinkItem","AdditionalInfoLink","Link","movieId","useParams","useState","movieDetails","setMovieDetails","genres","setGenres","poster","setPoster","location","useLocation","backLinkHref","state","from","useEffect","then","details","poster_path","toast","getDetails","genresList","map","genre","name","join","original_title","overview","vote_average","release_date","to","src","alt","Date","getFullYear","Math","ceil","Number","Suspense","fallback","Loading"],"sourceRoot":""}